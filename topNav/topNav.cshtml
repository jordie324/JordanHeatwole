@using DotNetNuke.Web.DDRMenu
@using System.Dynamic;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@*using SpeedyApp.Modules.SpeedyCustomStyle*@
@using MegaMenu.Models;
@using MegaMenu.Components;
@using DotNetNuke.Entities.Tabs;
@using DotNetNuke.Entities.Portals;

@{ dynamic root = Model.Source.root; }
@functions{
    private readonly MenuItems MenItems = new MenuItems();
    public int portalId = PortalController.GetCurrentPortalSettings().PortalId;
    public TabController tabController = new TabController();


}



@functions{
    bool HasChildrenSelected(List<MenuNode> nodes, bool selected)
    {
        foreach (var node in nodes)
        {
            if (node.Selected || selected)
            {
                return true;
            }
            else
            {
                selected = node.Selected || (node.HasChildren() ? HasChildrenSelected(node.Children, node.Selected) : false);
            }

        }
        return selected;
    }


    TabInfo GetTabInfo(MenuNode node)
    {
        return tabController.GetTab(node.TabId, portalId, false);
    }

}


@helper RenderNodes(List<MenuNode> nodes)
{
if (nodes.Count >= 1 && nodes != null)
{

    List<MenuItem> menuItems = MenItems.menuItems;
    int parentIndex = MenItems.GetMenuIndexByTabId(nodes[0].Parent.TabId);

    int nodeNum = 0;
    

    if (nodes.Count > 0)
    {
        if (nodes[0].Parent == Model.Source.root)
        {
            /*First level*/
            @:<div class="navbar-nav" data-level="0">
            }

        /*Render first level nodes*/
        foreach (MenuNode node in nodes)
        {
            var tabInfo = GetTabInfo(node);
            string menuType = MenItems.GetMenuTypeByTabId(node.TabId);
            int menuIndex = MenItems.GetMenuIndexByTabId(node.TabId);
            nodeNum = nodeNum + 1;
            var cssClasses = new List<string>();
            if (node.Depth == 0)
            {

            }
            //if (node.Selected || (node.HasChildren() ? HasChildrenSelected(node.Children, node.Selected) : false))
            //{
            //    cssClasses.Add("active");
            //}

            if (node.HasChildren())
            {
                cssClasses.Add("nav-item dropdown");
            }

            if (menuType.ToLower() == "megamenu")
            {
                cssClasses.Add("mega-parent");
            }
            var classString = new HtmlString((cssClasses.Count == 0) ? "" :
                (" class=\"" + string.Join(" ", cssClasses.ToArray()) + "\""));
            string classesA = "nav-link ";
            string hrefA = "";
                <dl @classString>

                    @if (node.Enabled && node.HasChildren())
                    {
                        classesA += "dropdown-toggle";
                    }

                    @if (node.Enabled)
                    {
                        hrefA = node.Url;
                    }
                    else
                    {
                        hrefA = "#";
                    }
                    <dt class="@classesA">
                        <a href="@hrefA">
                            <span>@node.Text</span>
                        </a>
                    </dt>
                    @if (node.Children.Count > 0)
                    {

                        var shouldSkinLevel1 = tabInfo.Terms.Any(x => x.Name == "menu_skip_1");

                        @RenderSecondLevel((shouldSkinLevel1 ? node.Children.SelectMany(x => x.Children).OrderBy(x => x.Text).ToList() : node.Children), menuType, menuItems, shouldSkinLevel1)
                    }
                </dl>
        }

            @:</div>
        }
    }
}


@helper RenderSecondLevel(List<MenuNode> nodes, string menuType, List<MenuItem> menuItems, bool shouldSkinLevel1)
{
    
    if (menuType == "Megamenu")
    {

            @RenderMegamenu(menuItems, nodes, shouldSkinLevel1)

    }
    else
    {
        @RenderDropdownmenu(nodes, shouldSkinLevel1)
    }
    
}


@helper RenderDropdownmenu(List<MenuNode> nodes, bool shouldSkinLevel1)
{
    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
        @foreach (var node in nodes)
        {
            if (node.Enabled)
            {
                <a class="dropdown-item" href="@node.Url">@node.Text</a>
            }
            else
            {
                <a class="dropdown-item" href="#">@node.Text</a>
            }

        }
    </div>

}



@helper RenderMegamenu(List<MenuItem> menuItems, List<MenuNode> nodes, bool shouldSkinLevel1)
{
    <dd class="dropdown-menu megadiv">
        <div data-level="1">
            @RenderSubnodes(nodes, menuItems)
        </div>
    </dd>
}


@helper RenderSubnodes(List<MenuNode> nodes, List<MenuItem> menuItems)
{

    foreach (var node in nodes)
    {
        
        <dl child-name='@(node.Text.Replace(" ", ""))' class="row page-parent">
            @if (node.Enabled)
            {
                <dt class="page-name @(node.HasChildren() ? "has-children" : "")">
                    <a href="@node.Url">@node.Text</a>
                </dt>
            }
            else
            {
                <a href="#" class="page-name btn btn-primary col-sm-4">@node.Text</a>
            }

            @if (node.HasChildren())
            {
                @RenderThirdLevel(node.Children, menuItems[MenItems.GetMenuIndexByTabId(node.TabId)], node.Text, node.Url);
            }
        </dl>
    }
}


        @helper RenderThirdLevel(List<MenuNode> nodes, MenuItem menuItem, string nodeTitle, string nodeUrl)
        {
        <dd data-level="2" class="page-details">

            <div child-name="page-details">
                <div class="row">
                    <div class="flex-column col-md-6">
                        <div class="topPane">
                            <a class="h2" href="@nodeUrl">@nodeTitle</a>
                            @(menuItem != null ? Html.Raw(menuItem.TopHtml) : Html.Raw(""))
                        </div>
                        <ul data-level="3">
                            @foreach (var node in nodes)
                            {
                                <li>
                                    @if (node.Enabled)
                                    {
                                        <a class="level3-links" href="@node.Url">@node.Text</a>
                                    }
                                    else
                                    {
                                        <a href="#">@node.Text</a>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="col-md-6 rightPane">
                        @(menuItem != null ? Html.Raw(menuItem.RightHtml) : Html.Raw(""))
                    </div>
                </div>
            </div>

        </dd>
}


        @RenderNodes(root.Children)
