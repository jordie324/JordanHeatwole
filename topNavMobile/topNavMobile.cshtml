@using System.Collections.Generic
@using DotNetNuke.Web.DDRMenu;
@using System.Dynamic;
@using DotNetNuke.Entities.Tabs;
@using DotNetNuke.Entities.Portals;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@{ var root = Model.Source.root; }

@helper RenderMenu(IList<MenuNode> nodes)
{
    
    <ul class="parent">
        @RenderNodes(nodes)
    </ul>
             
                
}


@functions{
    public int portalId = PortalController.GetCurrentPortalSettings().PortalId;
    public TabController tabController = new TabController();


    TabInfo GetTabInfo(MenuNode node)
    {
        return tabController.GetTab(node.TabId, portalId, false);
    }

}


@helper RenderNodes(IList<MenuNode> nodes)
{
foreach (var node in nodes)
{
    var tabInfo = new TabInfo();
        var shouldSkinLevel1 = false;
    if (node.Depth == 0)
    {
        tabInfo = GetTabInfo(node);
        shouldSkinLevel1 = tabInfo.Terms.Any(x => x.Name == "menu_skip_1");
    }
                <li class="@(node.Selected ? "active" : "")">
                    @if (!node.Enabled)
                    {
                        <a class="nav-items" href="#">@node.Text</a>
                    }
                    else
                    {
                        if (node.Children.Any())
                        {

                            <a class="nav-link" href="@node.Url">@node.Text</a>
                        }
                        else
                        {
                            <a class="nav-link" href="@node.Url">@node.Text</a>
                        }
                    }

                    @if (node.Children.Any())
                    {
                        <ul class="subitems">
                            @RenderNodes((shouldSkinLevel1 ? node.Children.SelectMany(x => x.Children).OrderBy(x => x.Text).ToList() : node.Children))
                        </ul>
                    }
                </li>
        }
}
@RenderMenu(root.Children)